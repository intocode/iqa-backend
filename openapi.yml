openapi: 3.0.3
info:
  title: IQA-application
  version: 0.1.0
  description: API of IQA-application
  contact:
    name: admin
    email: admin@intocode.ru
servers:
  - url: 'https://iqa-backend.herokuapp.com'
    description: Staging server
  - url: 'http://localhost:3030'
    description: Local server
paths:
  /user/profile:
    get:
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'Вывод данных пользователя'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserData'
        '401':
          description: 'Ошибка авторизации'
        '404':
          description: 'Не найдено'
  /user/favorites:
    get:
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'Вывод избранных вопросов пользователя'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionData'
        '401':
          description: 'Ошибка авторизации'
        '404':
          description: 'Не найдено'
  /user/favorites/{questionId}:
    post:
      summary: Добавление вопроса в избранные по ID
      parameters:
        - in: path
          name: questionId
          schema:
            type: integer
          required: true
          description: Числовой идентификатор для получения вопроса по ID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'Добавление вопроса в избранные'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: 61c470e91d5e851eb6fd8d47, 61c470e91d5e851eb6fd8d24, 61c470e91d5e851eb6fd8d25
        '401':
          description: 'Ошибка авторизации'
        '400':
          description: 'Неправильный, некорректный запрос'
        '404':
          description: 'Не найдено'
    delete:
      summary: Удаление вопроса из избранных по ID
      parameters:
        - in: path
          name: questionId
          schema:
            type: integer
          required: true
          description: Числовой идентификатор для получения вопроса по ID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'Удаление вопроса из избранных'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: 61c470e91d5e851eb6fd8d47
        '401':
          description: 'Ошибка авторизации'
        '400':
          description: 'Неправильный, некорректный запрос'
        '404':
          description: 'Не найдено'
  /tags:
    get:
      responses:
        '200':
          description: 'Вывод всех тэгов'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  $ref: '#/components/schemas/TagData'
        '400':
          description: 'Неправильный, некорректный запрос'
    post:
      security:
        - bearerAuth: []
      description: 'Добавление нового тэга в базу'
      requestBody:
        description: 'Данные при добавлении нового тэга'
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: 'nameTag'
                color:
                  type: string
                  example: 'primary'
      responses:
        '200':
          description: 'Ответ после добавления тэга в базу'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  $ref: '#/components/schemas/TagData'
        '401':
          description: 'Ошибка авторизации'
        '400':
          description: 'Неправильный, некорректный запрос'
  /questions:
    get:
      summary: Поиск по вопросам
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: Текстовые данные для поиска по вопросам
      responses:
        '200':
          description: 'Вывод всех вопросов'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  $ref: '#/components/schemas/QuestionData'
        '400':
          description: 'Неправильный, некорректный запрос'
    post:
      security:
        - bearerAuth: []
      description: 'Добавление нового вопроса'
      requestBody:
        description: 'Данные для нового вопроса'
        content:
          application/json:
            schema:
              properties:
                question:
                  type: string
                  example: 'The more your tests resemble the way your software is used, the more confidence they can give you.'
                  minLength: 10
                  maxLength: 140
                comment:
                  type: string
                  example: 'Comments'
                tags:
                  type: string
                  example: '61ae1530a2416240fac7b3a9'
                user:
                  type: string
                  example: '61ae1530a2416240fac7b3a9'
      responses:
        '200':
          description: 'Ответ после добавления вопроса'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Question created'
                  question:
                    type: object
                    $ref: '#/components/schemas/QuestionData'
        '401':
          description: 'Ошибка авторизации'
        '400':
          description: 'Неправильный, некорректный запрос'
  /questions/{questionId}:
    get:
      summary: Вывод вопроса по ID
      parameters:
        - in: path
          name: questionId
          schema:
            type: integer
          required: true
          description: Числовой идентификатор для получения вопроса по ID
      responses:
        '200':
          description: 'Вывод вопроса по id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionData'
        '400':
          description: 'Неправильный, некорректный запрос'
  /questions/{questionId}/rate:
    post:
      summary: Поднятия рейтинга для вопроса по ID
      parameters:
        - in: path
          name: questionId
          schema:
            type: integer
          required: true
          description: Числовой идентификатор для получения вопроса по ID
      security:
        - bearerAuth: []
      description: 'Поднятие/понижение рейтинга вопроса'
      requestBody:
        description: 'Данные для поднятия/понижения рейтинга вопроса'
        content:
          application/json:
            schema:
              properties:
                volume:
                  type: number
                  example: -1
      responses:
        '200':
          description: 'Ответ после запроса поднятие/понижения рейтинга вопроса'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  $ref: '#/components/schemas/RateData'
        '401':
          description: 'Ошибка авторизации'
        '404':
          description: 'Не найдено'
  /questions/{questionId}/comments:
    get:
      summary: Вывод комментарий вопроса по ID
      parameters:
        - in: path
          name: questionId
          schema:
            type: integer
          required: true
          description: Числовой идентификатор для получения вопроса по ID
      responses:
        '200':
          description: 'Вывод комментарий определенного вопроса'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentData'
        '404':
          description: 'Не найдено'
    post: 
      summary: Добавление комментарий вопроса по ID
      parameters:
        - in: path
          name: questionId
          schema:
            type: integer
          required: true
          description: Числовой идентификатор для получения вопроса по ID
      security:
        - bearerAuth: []
      requestBody:
        description: 'Данные для добавления комментария'
        content:
          application/json:
            schema:
              properties:
                text:
                  type: string
                  example: 'Текст комментария'
                author:
                  type: string
                  example: '61e299dfsl3a51al5261e65b'
                questionId:
                  type: string
                  example: '61e299dfsl3a24al5261e23c'
      responses:
        '200':
          description: 'Ответ после добавления комментария'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentData'
        '401':
          description: 'Ошибка авторизации'
        '400':
          description: 'Неправильный, некорректный запрос'
        '404':
          description: 'Не найдено'
  /questions/{questionId}/delete:
    delete:
      summary: Удаление вопроса по ID
      parameters:
        - in: path
          name: questionId
          schema:
            type: integer
          required: true
          description: Числовой идентификатор для получения вопроса по ID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'Удаление вопроса'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Question deleted'
        '401':
          description: 'Ошибка авторизации'
        '403':
          description: 'Недостаточно прав доступа'
        '400':
          description: 'Неправильный, некорректный запрос'
  /questions/{questionId}/restore:
    patch:
      summary: Восстановление вопроса по ID
      parameters:
        - in: path
          name: questionId
          schema:
            type: integer
          required: true
          description: Числовой идентификатор для получения вопроса по ID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'Восстановление вопроса'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Question restored'
        '401':
          description: 'Ошибка авторизации'
        '403':
          description: 'Недостаточно прав доступа'
        '400':
          description: 'Неправильный, некорректный запрос'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: jwt
  schemas:
    UserData:
      properties:
        _id:
          type: string
          example: '61e299dfsl3a51al5261e65b'
        name:
          type: string
          example: 'IvanIvanov'
        email:
          type: string
          example: 'ivanmagimedov@mail.ru'
        githubId:
          type: string
          example: '93570249'
        avatarUrl:
          type: string
          example: 'https://avatars.githubusercontent.com/u/93570249?v=4'
        favorites:
          type: array
          items:
            type: string
            example: '61c470e91d5e851eb6fd8d47'
        createdAt:
          type: string
          example: '2022-01-15T09:54:39.531Z'
        updatedAt:
          type: string
          example: '2022-02-22T10:57:49.668Z'
        avatar:
          type: string
          example:
            thumbnail: 'https://avatars.githubusercontent.com/u/93570249?v=4&s=40'
            full: 'https://avatars.githubusercontent.com/u/93570249?v=4'
    RateData:
      properties:
        user:
          type: string
          example: '61e299dfsl3a51al5261e65b'
        volume:
          type: number
          example: -1
        _id:
          type: string
          example: '61e299dfsl3a51al5261e23d'
        createdAt:
          type: string
          example: '2022-01-15T09:54:39.531Z'
        updatedAt:
          type: string
          example: '2022-02-22T10:57:49.668Z'
    QuestionData:
      properties:
        _id:
          type: string
          example: '61e299dfsl3a51al5261e65b'
        question:
          type: string
          example: 'The more your tests resemble the way your software is used, the more confidence they can give you.'
        comment:
          type: string
          example: 'You want to write maintainable tests that give you high confidence that your components are working for your users. As a part of this goal, you want your tests to avoid including implementation details so refactors of your components (changes to implementation but not functionality) do not break your tests and slow you and your team down'
        tags:
          type: array
          items:
            type: string
            $ref: '#/components/schemas/TagData'
        user:
          $ref: '#/components/schemas/UserData'
        rates:
          type: array
          items:
            type: string
            $ref: '#/components/schemas/RateData'
        createdAt:
          type: string
          example: '2022-01-15T09:54:39.531Z'
        updatedAt:
          type: string
          example: '2022-02-22T10:57:49.668Z'
        deleted:
          type: boolean
          example: false
        commentsCount:
          type: number
          example: 0
    TagData:
      properties:
        _id:
          type: string
          example: '61e299dfsl3a51al5261e65b'
        name:
          type: string
          example: jest
          minLength: 1
          maxLength: 15
        color:
          type: string
          example: 'primary'
        createdAt:
          type: string
          example: '2022-01-15T09:54:39.531Z'
        updatedAt:
          type: string
          example: '2022-02-22T10:57:49.668Z'
    CommentData:
      properties:
        _id:
          type: string
          example: '61e299dfsl3a51al5261e65b'
        text:
          type: string
          example: 'FF'
        author:
          $ref: '#/components/schemas/UserData'
        questionId:
          type: string
          example: '62029815be7ea76826b79ff4'
        createdAt:
          type: string
          example: '2022-01-15T09:54:39.531Z'
        updatedAt:
          type: string
          example: '2022-02-22T10:57:49.668Z'
